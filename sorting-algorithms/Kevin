/*
Bubble SORT

*** Description

Iterate over array, comparing adjacent items and swap if in incorrect order. Largest elements bubble to the end of the array

*** Exercises

- Implement bubble sort
- Identify time complexity

Optimizations:
- Make algorithm adaptive (if at any point array is already sorted, exit function early). After doing this, what is time complexity for nearly sorted arrays?
- For each pass through the array, are you doing any unnecessary checking of elements? Minimize checking and consider the effect on time complexity.

Variants:
- Implement cocktail sort (for each pass find both min and max values and sort in both directions). How does this impact performance?
(https://en.wikipedia.org/wiki/Cocktail_sort)

The algorithm works by comparing each item in the list with the item next to it, and swapping them if required. 
In other words, the largest element has bubbled to the top of the array. 
The algorithm repeats this process until it makes a pass all the way through the list without swapping any items.
*/

function bubbleSorting(ary) {
  for (let i=0; i <= ary.length; i++) {
    for (let j = 0; j <= i; j ++) {
      if (ary[j-1] > ary[j] ) {
        let temp = ary[j-1]
        ary[j-1] = ary[j]
        ary[j] = temp
        bubbleSorting(ary)
      }
    }
  }
  return ary
}

bubbleSorting([2,3,4,1,5,1,2,9,5,7,8,6,3,3,1,4,5,6,7,34,3,54,23,4,5,6])
